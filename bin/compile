#!/usr/bin/env bash
 
set -e

BUILD_DIR=$1 # The app directory, usually /app. This will have the app source initially. Whatever is left here will be persisted.
CACHE_DIR=$2 # The contents of CACHE_DIR will be persisted between builds so we can use it to speed the builds up
ENV_DIR=$3     # An envdir directory of the app's environment variables

CACHED_RBENV_ROOT=$CACHE_DIR/rbenv

APP_DIR=/home/vcap/app

[ "$BUILD_DIR" = "$APP_DIR" ] || cp -fa $BUILD_DIR $APP_DIR
mkdir -p $APP_DIR

RBENV_ROOT=$APP_DIR/.rbenv
BUILD_RBENV_ROOT=$BUILD_DIR/.rbenv

# If REMOVE_RBENV_CACHE is set, clean up the cache
[ -n "$REMOVE_RBENV_CACHE" ] && [ -d $CACHED_RBENV_ROOT ] && echo "Removing cached copy of RBENV"
[ -n "$REMOVE_RBENV_CACHE" ] && [ -d $CACHED_RBENV_ROOT ] && rm -fr $CACHED_RBENV_ROOT

# Update any cached rbenv, remove the cache if there is an error
[ -d $CACHED_RBENV_ROOT/.git ] && (
  echo "Found existing cached copy of rbenv"
  ( cd $CACHED_RBENV_ROOT; git pull ) || rm -fr $CACHED_RBENV_ROOT
)

# Clone a new rbenv if there isn't already one cached
[ -d $CACHED_RBENV_ROOT/.git ] || (
  echo "Cloning a fresh copy of rbenv to cache"
  [ -d $CACHED_RBENV_ROOT ] && rm -fr $CACHED_RBENV_ROOT
  [ -d $CACHED_RBENV_ROOT ] || git clone https://github.com/sstephenson/rbenv.git $CACHED_RBENV_ROOT
)

# Update any cached ruby-build, remove the cache if there is an error
[ -d $CACHED_RBENV_ROOT/plugins/ruby-build/.git ] && (
  echo "Found existing cached copy of ruby-build"
  ( cd $CACHED_RBENV_ROOT/plugins/ruby-build && git pull ) || rm -fr $CACHED_RBENV_ROOT
)

# Clone a new ruby-build if there isn't already one cached
[ -d $CACHED_RBENV_ROOT/plugins/ruby-build/.git ] || (
  echo "Cloning a fresh copy of ruby-build to cache"
  [ -d $CACHED_RBENV_ROOT/plugins/ruby-build/.git ] && rm -fr $CACHED_RBENV_ROOT/plugins/ruby-build/.git
  [ -d $CACHED_RBENV_ROOT/plugins/ruby-build ] || git clone https://github.com/sstephenson/ruby-build.git $CACHED_RBENV_ROOT/plugins/ruby-build
)

# Restore any cached rbenv (this will include ruby-build)
[ -d $CACHED_RBENV_ROOT ] && echo "Copying cached copy of rbenv"
[ -d $CACHED_RBENV_ROOT ] && cp -fa $CACHED_RBENV_ROOT $RBENV_ROOT

PROFILE_ROOT=$APP_DIR/.profile.d
BUILD_PROFILE_ROOT=$BUILD_DIR/.profile.d

# Generate the bash profile to source
mkdir -p $PROFILE_ROOT
RBENV_PROFILE=$PROFILE_ROOT/rbenv
echo 'export APP_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/.."' >> $RBENV_PROFILE
echo 'export RBENV_ROOT="$APP_DIR/.rbenv"' >> $RBENV_PROFILE
echo 'export PATH="$RBENV_ROOT/bin:$PATH"' >> $RBENV_PROFILE
echo 'hash -r' >> $RBENV_PROFILE
echo '[ -f $RBENV_ROOT/bin/rbenv ]' >> $RBENV_PROFILE
echo 'eval "$(rbenv init -)"' >> $RBENV_PROFILE

# Source the rbenv profile to prepare rbenv to run
source $RBENV_PROFILE

# Identify the ruby versions this app may need to run
ruby_version_from_dotfile=$( ( [ -f $APP_DIR/.ruby-version ] && cat $APP_DIR/.ruby-version ) || true )
ruby_version_from_gemfile=$( grep -e '^ruby ' $APP_DIR/Gemfile | sed -e 's/^ruby //' -e 's/[\'"'"'\"]//g' || true)

# Iterate through each ruby version, building it if neccessary
for ruby_version in ${ruby_version_from_dotfile} ${ruby_version_from_gemfile} ; do

  echo "Checking for existence of rbenv ruby ${ruby_version}"

  # Generate the ruby version if it doesn't exist yet in the cache
  [ -d $RBENV_ROOT/versions/${ruby_version} ] || (
    rbenv install --list

    echo "Could not find rbenv ruby ${ruby_version}, building"

    # Prepare the build environment by updating ubuntu first. Use caching between builds to improve the speed.
    grep old-releases /etc/apt/sources.list >/dev/null 2>&1 || (
      if ! grep -qe 'utopic\|trusty\|saucy\|precise\|lucid' /etc/apt/sources.list ; then
        perl -pi -e "s%archive.ubuntu.com/ubuntu%old-releases.ubuntu.com/ubuntu%g" /etc/apt/sources.list
      fi
      APT_CACHE_PATH=$CACHE_DIR/apt
      mkdir -p $APT_CACHE_PATH
      apt-get -o dir::cache::archives=$APT_CACHE_PATH update
      LC_ALL=C DEBIAN_FRONTEND=noninteractive apt-get -o dir::cache::archives=$APT_CACHE_PATH install autoconf bison build-essential libssl-dev zlib1g zlib1g-dev -f -y
    )

    # Use ruby-build to build the ruby version. Use caching to improve build speed.

    RUBY_BUILD_CACHE_PATH=$CACHE_DIR/ruby-build.cache
    mkdir -p $RUBY_BUILD_CACHE_PATH

    RUBY_BUILD_BUILD_PATH=$CACHE_DIR/ruby-build.sources
    mkdir -p $RUBY_BUILD_BUILD_PATH

    rbenv install --keep ${ruby_version}

    # Test out the new ruby, updating rubygems and installing bundler along the way
    bash -c "
      source $RBENV_PROFILE
      rbenv rehash
      cd $APP_DIR

      # Ensure rubygems is updated to the latest
      gem install rubygems-update --no-ri --no-rdoc
      rbenv rehash
      update_rubygems || true

      # Install Bundler
      gem install bundler --no-ri --no-rdoc
    "

    # Make a backup copy in the cache for this ruby version for next time
    mkdir -p $CACHED_RBENV_ROOT/versions
    echo "Creating cached copy of ruby $ruby_version"
    cp -fa $RBENV_ROOT/versions/$ruby_version $CACHED_RBENV_ROOT/versions/$ruby_version
  )

done

# Overlay the built rbenv back overtop the $BUILD_DIR so it is persisted in the resultant slug
mkdir -p $BUILD_DIR
echo "Copying files to the slug build directory"
cp -fa $RBENV_ROOT $BUILD_RBENV_ROOT
mkdir -p $BUILD_PROFILE_ROOT
cp -fa $PROFILE_ROOT/* $BUILD_PROFILE_ROOT/

# Source the rbenv environment
rbenv rehash
cd $APP_DIR

# Export the resultant rbenv environment variables for later buildpacks to inherit
export PATH RBENV_ROOT
